spring:
  aop:
    proxy-target-class: true
    auto: true
  mvc:
    date-format: yyyy-MM-dd HH:mm:ss
  jackson:
    joda-date-time-format: yyyy-MM-dd HH:mm:ss
    date-format: yyyy-MM-dd HH:mm:ss
  cloud:
    config:
      uri: http://${CONFIG_HOST:localhost}:${CONFIG_PORT:8090}/
      label: master
      profile: ${spring.profiles.active:dev}
    inetutils:
      ignoredInterfaces:
        - docker0
        - veth.*
        - VM.*
      preferredNetworks:
        - 192.168
  devtools:
    restart:
      #热部署生效
      enabled: true
      #设置重启的目录
      #additional-paths: src/main/java
      #classpath目录下的WEB-INF文件夹内容修改不重启
      #exclude: WEB-INF/**

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

eureka:
  client:
    serviceUrl:
      defaultZone: http://admin:admin@${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka/
    instance:
      # docker 部署开启
      prefer-ip-address: true
      status-page-url-path: /actuator/info
      health-check-url-path: /actuator/health
      instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}
mybatis:
  type-aliases-package: com.tiger.tgcloud.uac.model.domain
  mapper-locations: classpath:mapper/*.xml,classpath*:sdk/mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
mapper:
  mappers: com.tiger.tgcloud.core.mybatis.MyMapper
  not-empty: false
  identity: MYSQL
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
security:
  oauth2:
    client:
      clientId: tgcloud-microservice-uac
      clientSecret: tgcloudClientSecret
      access-token-uri: http://${GATEWAY_HOST:localhost}:${GATEWAY_PORT:7979}/aus/oauth/token
      user-authorization-uri: http://${GATEWAY_HOST:localhost}:${GATEWAY_PORT:7979}/aus/oauth/authorize
      clientAuthenticationScheme: header
    resource:
      user-info-uri: http://${GATEWAY_HOST:localhost}:${GATEWAY_PORT:7979}/aus/user
      prefer-token-info: false
      jwt:
        key-uri: http://localhost:8999/oauth/token_key

feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
#// 这里获取了四个参数，ReadTimeout，ConnectTimeout，MaxAutoRetries， MaxAutoRetriesNextServer
#        int ribbonReadTimeout = getTimeout(config, commandKey, "ReadTimeout",
#            IClientConfigKey.Keys.ReadTimeout, RibbonClientConfiguration.DEFAULT_READ_TIMEOUT);
#        int ribbonConnectTimeout = getTimeout(config, commandKey, "ConnectTimeout",
#            IClientConfigKey.Keys.ConnectTimeout, RibbonClientConfiguration.DEFAULT_CONNECT_TIMEOUT);
#        int maxAutoRetries = getTimeout(config, commandKey, "MaxAutoRetries",
#            IClientConfigKey.Keys.MaxAutoRetries, DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES);
#        int maxAutoRetriesNextServer = getTimeout(config, commandKey, "MaxAutoRetriesNextServer",
#            IClientConfigKey.Keys.MaxAutoRetriesNextServer, DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER);
#        // 原来ribbonTimeout的计算方法在这里，以上文的设置为例
#        // ribbonTimeout = (50000 + 50000) * (0 + 1) * (1 + 1) = 200000
#        ribbonTimeout = (ribbonReadTimeout + ribbonConnectTimeout) * (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1);
#ribbonTimeout 是最终ribbon的过期时间 这个时间应该比hystrix的过期时间要长
ribbon:
  eager-load:
    enabled: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 2
  OkToRetryOnAllOperations: false
  ConnectTimeout: 10000
  ReadTimeout: 10000
hystrix:
  propagate:
    request-attribute:
      enabled: true
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 120000
